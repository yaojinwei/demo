package simple;

/**
 * 桥接模式
 *   桥接模式的定义是将抽象化与实现化分离（用组合的方式而不是继承的方式），使得两者可以独立变化。可以减少派生类的增长。
 * 使用场景
 *   1、对于有两个及以上变化维度（即两个变化的原因）的系统，采用桥接模式来进行设计系统中类的个数更少，且系统扩展更为方便。
 *      桥接模式将继承关系转换为关联关系，从而降低了类与类之间的耦合，减少了代码编写量。
 *   2、不希望抽象部分和行为有一种固定关系，而是可以动态联系的。
 * 组成
 *   抽象类(Abstraction):定义抽象类的接口,维护一个指向Implementor类型对象的指针
*    扩充抽象类(RefinedAbstraction)：扩充由Abstraction定义的接口
*    实现类接口(Implementor)：定义实现类的接口，该接口不一定要与Abstraction的接口完全一致；事实上这两个接口可以完全不同。
 *    一般来讲， Implementor接口仅提供基本操作，而 Abstraction则定义了基于这些基本操作的较高层次的操作。
*    具体实现类(ConcreteImplementor)：实现Implementor接口并定义它的具体实现。
 * 优缺点
 *   1、分离接口及其实现部分 一个实现未必不变地绑定在一个接口上。抽象类的实现可以在运行时刻进行配置，一个对象甚至可以在运行时刻改变它的实现。
 *      将Abstraction与Implementor分离有助于降低对实现部分编译时刻的依赖性，当改变一个实现类时，并不需要重新编译 Abstraction类和它的客户程序。
 *      为了保证一个类库的不同版本之间的二进制兼容性，一定要有这个性质。另外，接口与实现分离有助于分层，从而产生更好的结构化系统，系统的高层部分仅需知道Abstraction和Implementor即可。
 *   2、提高可扩充性 你可以独立地对Abstraction和Implementor层次结构进行扩充。
 *   3、 实现细节对客户透明 你可以对客户隐藏实现细节，例如共享 Implementor对象以及相应的引用计数机制（如果有的话） 。
 * 与装饰者模式的区别
 *   1、桥接模式中所说的分离，其实是指将结构与实现分离（当结构和实现有可能发生变化时）或属性与基于属性的行为进行分离；而装饰者只是对基于属性的行为进行封闭成独立的类。
 *   2、桥接中的行为是横向的行为，行为彼此之间无关联；而装饰者模式中的行为具有可叠加性，其表现出来的结果是一个整体，一个各个行为组合后的一个结果。
 *
 * @author yaojinwei<yjw0909@gmail.com>
 * @since 2016/10/8
 */
public class Client {
    public static void main(String[] args) {
        //大刷子画绿色
        Color color = new Green();
        Brush brush = new BigBrush(color);
        brush.draw();
    }
}
